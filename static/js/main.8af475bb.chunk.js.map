{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","svgRef","React","createRef","p","d3","domain","range","Math","PI","values","map","o","sin","handleChange","bind","triggerBufferUpdate","doAudio","event","this","Number","nativeEvent","srcElement","id","target","value","console","log","document","querySelector","addEventListener","stepper","stepperIndex","scaleAudioY","scaleAudioLerp","length","channel","arrayBuffer","numberOfChannels","nowBuffering","getChannelData","i","audioCtx","window","AudioContext","webkitAudioContext","resume","analyser","createAnalyser","smoothingTimeConstant","gainNode","createGain","myArrayBuffer","createBuffer","sampleRate","source","createBufferSource","buffer","connect","gain","destination","loop","start","canvas","canvasCtx","getContext","WIDTH","width","HEIGHT","height","fftSize","bufferLength","dataArray","Uint8Array","clearRect","draw","requestAnimationFrame","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","y","moveTo","lineTo","stroke","style","padding","className","outline","position","d","type","defaultValue","transform","top","left","onInput","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8af475bb.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css';\nimport * as d3 from 'd3'\n\n// function App() {\n\n\n\n//   return (\n//     <div className=\"App\">\n//       <div>F2</div>\n//       <div>Ok</div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nexport default class App extends React.Component {\n\n    constructor (props) {\n      super(props)\n      this.state = {}\n      this.svgRef = React.createRef()\n      const p = d3.scaleLinear().domain([0,16]).range([0,Math.PI*2])\n      this.values = d3.range(16).map(o=>{return (50*Math.sin(p(o)))+50})\n      // this.values = d3.range(16).map(o=>{return 0})\n      // const p = d3.scaleLinear().domain([0,16]).range([0,100])\n      // this.values = d3.range(16).map(o=>{return p(o) })\n\n      this.handleChange = this.handleChange.bind(this)\n      this.triggerBufferUpdate = this.triggerBufferUpdate.bind(this)\n      this.doAudio = this.doAudio.bind(this)\n\n    }\n\n    handleChange (event) {\n      // console.log(event.nativeEvent.srcElement.id)\n      // console.log(JSON.stringify(event.target.value))\n      // console.log(JSON.stringify(this.values))\n      // console.log(event.target.value)\n      this.values[Number(event.nativeEvent.srcElement.id)] = Number(event.target.value)\n      this.triggerBufferUpdate()\n    }\n  \n    componentDidMount() {\n\n      console.log('mounted')\n\n      const w = 100\n      const h = 30\n\n      const self = this\n      // this.arrayBuffer = this.doAudio()\n\n      document.querySelector('canvas').addEventListener('click', this.doAudio)\n\n    }\n\n    triggerBufferUpdate () {\n      // console.log('trigger buffer update')\n      // console.log(JSON.stringify(this.values))\n      const stepRate = 24\n      let stepper = 0\n      let stepperIndex = 0\n      const scaleAudioY = d3.scaleLinear().domain([0,100]).range([1,-1])\n      let scaleAudioLerp = d3.scaleLinear().domain([0,stepRate])\n        .range([this.values[stepperIndex], this.values[(stepperIndex+1)%this.values.length]])\n      for (var channel = 0; channel < this.arrayBuffer.numberOfChannels; channel++) {\n        var nowBuffering = this.arrayBuffer.getChannelData(channel);\n        for (var i = 0; i < this.arrayBuffer.length; i++) {\n          // nowBuffering[i] = scaleAudioY(this.values[stepperIndex])\n          nowBuffering[i] = scaleAudioY(scaleAudioLerp(stepper))\n          stepper++;\n          if(stepper > stepRate) {\n            // console.log(stepper, scaleAudioY(scaleAudioLerp(stepper)))\n            stepper = 0\n            stepperIndex += 1\n            stepperIndex = stepperIndex % this.values.length\n            scaleAudioLerp = d3.scaleLinear().domain([0,stepRate])\n              .range([this.values[stepperIndex], this.values[(stepperIndex+1)%this.values.length]])\n          }\n        }\n      }        \n    }\n\n    doAudio () {\n      var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      \n      audioCtx.resume()\n      console.log(audioCtx)\n\n      var analyser = audioCtx.createAnalyser();\n      // analyser.minDecibels = -50;\n      // analyser.maxDecibels = -30;\n      analyser.smoothingTimeConstant = 0.85;\n\n      const gainNode = audioCtx.createGain();\n      console.log(audioCtx.state); // running\n\n\n\n      // Create an empty three-second stereo buffer at the sample rate of the AudioContext\n      var myArrayBuffer = audioCtx.createBuffer(2, audioCtx.sampleRate * 3, audioCtx.sampleRate);\n      this.arrayBuffer = myArrayBuffer\n\n      // Fill the buffer with white noise;\n      // just random values between -1.0 and 1.0\n\n      this.triggerBufferUpdate()\n\n      // Get an AudioBufferSourceNode.\n      // This is the AudioNode to use when we want to play an AudioBuffer\n      var source = audioCtx.createBufferSource();\n\n      // set the buffer in the AudioBufferSourceNode\n      source.buffer = myArrayBuffer;\n      source.connect(analyser)\n\n      gainNode.gain.value = .25\n      source.connect(gainNode)\n      gainNode.connect(audioCtx.destination)\n      source.loop = true\n      source.start();      \n      //source.stop()\n\n      var canvas = document.querySelector('.visualiser');\n      var canvasCtx = canvas.getContext(\"2d\");\n\n      let WIDTH = canvas.width;\n      let HEIGHT = canvas.height;\n  \n      analyser.fftSize = 1024;\n      var bufferLength = analyser.fftSize;\n      console.log(bufferLength);\n      var dataArray = new Uint8Array(bufferLength);\n\n      canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\n\n      var draw = function() {\n\n        let drawVisual = requestAnimationFrame(draw);\n\n        analyser.getByteTimeDomainData(dataArray);\n\n        canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n\n        canvasCtx.lineWidth = 2;\n        canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\n\n        canvasCtx.beginPath();\n\n        var sliceWidth = WIDTH * 1.0 / bufferLength;\n        var x = 0;\n\n        for(var i = 0; i < bufferLength; i++) {\n\n          var v = dataArray[i] / 128.0;\n          var y = v * HEIGHT/2;\n\n          if(i === 0) {\n            canvasCtx.moveTo(x, y);\n          } else {\n            canvasCtx.lineTo(x, y);\n          }\n\n          x += sliceWidth;\n        }\n\n        canvasCtx.lineTo(canvas.width, canvas.height/2);\n        canvasCtx.stroke();\n      };\n\n      draw();\n\n\n      return myArrayBuffer\n    }\n\n    render () {\n      return (\n        <div style={{padding: '10px'}}>\n          <canvas className='visualiser' width='1024' height='256' style={{ outline: '1px solid black'}}/>\n          <div style={{position: 'relative'}}>\n            {d3.range(16).map(d=>{\n              return (\n                <input type='range' \n                  key={'ok'+d}\n                  id={d}\n                  defaultValue={this.values[d]}\n                  style={{\n                    transform: 'rotateZ(270deg)', \n                    width: '200px',\n                    position: 'absolute',\n                    top: 100,\n                    left: d*20                    \n                  }}\n                  // onChange={this.handleChange}\n                  onInput={this.handleChange}\n                  />\n              ) \n            })}\n          </div>\n        </div>\n      )\n    }\n\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}